@page "/"
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<MonacoEditor Id="myMainEditor"
              @ref="_editor"
              OnDidInit="EditorOnDidInit"
              ConstructionOptions="EditorConstructionOptions"
              OnDidChangeCursorPosition="EditorDidChangeCursorPosition" />


<MudGrid Justify="Justify.SpaceBetween">
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="string" Label="Langauges" IsOpenChanged="ValueChangedSetLanguage" @bind-Value="selectedLanguage" SearchFunc="@SearchLanguages" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" />
    </MudItem>
    <MudItem>
        <MudFab OnClick="CreatePasteButtonClick" Class="mr-4" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Send" Label="Create Paste" />
    </MudItem>
</MudGrid>

@code {
    private MonacoEditor? _editor { get; set; }
    private string selectedLanguage = "javascript";
    private string editorTextValue = "";
    private string[] languages = new string[]
    {
        "abap","aes","apex","azcli","bat","bicep","c","cameligo","clojure","coffeescript","cpp",
        "csharp","csp","css","cypher","dart","dockerfile","ecl","elixir","flow9","freemarker2","fsharp",
        "go","graphql","handlebars","hcl","html","ini","java","javascript","json","julia",
        "kotlin","less","lexon","liquid","lua","m3","markdown","mips","msdax","mysql","objective-c","pascal","pascaligo",
        "perl","pgsql","php","pla","plaintext","postiats","powerquery","powershell","proto","pug","python","qsharp","r",
        "razor","redis","redshift","restructuredtext","ruby","rust","sb","scala","scheme","scss","shell","sol","sparql",
        "sql","st","swift","systemverilog","tcl","twig","typescript","vb","verilog","xml","yaml"
    };

    private async Task<IEnumerable<string>> SearchLanguages(string value)
    {
        //Add delay for rendering purposes
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return languages;
        return languages.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task ValueChangedSetLanguage()
    {
        var currentModel = await _editor!.GetModel();
        await MonacoEditor.SetModelLanguage(currentModel, selectedLanguage);
        Console.WriteLine($"Selected language changed to {selectedLanguage}");
    }

    private async Task CreatePasteButtonClick()
    {
        var paste = new UserPasteItem()
        {
            Body = editorTextValue,
            Language = selectedLanguage
        };

        await Http.PostAsJsonAsync("api/pastes", paste);

        await _editor!.SetValue("");

    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Dimension = new Dimension() { Height = 700, Width = 1500 },
                Scrollbar = new EditorScrollbarOptions()
                {
                    Vertical = "hidden",
                    Horizontal = "hidden"
                },
                Language = "javascript",
                Value = ""

            };
    }

    private async Task EditorDidChangeCursorPosition(CursorPositionChangedEvent eventArgs)
    {
        Console.WriteLine("EditorDidChangeCursorPosition");
        editorTextValue = await _editor!.GetValue();
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        await _editor!.SetValue("");
    }

}