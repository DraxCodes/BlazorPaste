@page "/"

<PageTitle>Index</PageTitle>

@code {
	private MonacoEditor _editor { get; set; }
	private string[] decorationIds;

	private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				AutomaticLayout = false,
				Dimension = new Dimension() {Height = 700, Width = 1500},
				Scrollbar = new EditorScrollbarOptions()
				{
					Vertical = "hidden",
					Horizontal = "hidden"
				},
				Language = "javascript",
				Value = "\"use strict\";\n" +
                    "function Person(age) {\n" +
                    "	if (age) {\n" +
                    "		this.age = age;\n" +
                    "	}\n" +
                    "}\n" +
                    "Person.prototype.getAge = function () {\n" +
                    "	return this.age;\n" +
                    "};\n"
				
			};
	}

	private void EditorDidChangeCursorPosition(CursorPositionChangedEvent eventArgs)
	{
		Console.WriteLine("EditorDidChangeCursorPosition");
	}

	private async Task EditorOnDidInit(MonacoEditorBase editor)
	{
		await _editor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.KEY_H, (editor, keyCode) =>
		{
			Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
		});

		var newDecorations = new ModelDeltaDecoration[]
		{
			new ModelDeltaDecoration
			{
				Range = new BlazorMonaco.Range(3,1,3,1),
				Options = new ModelDecorationOptions
				{
					IsWholeLine = true,
					ClassName = "decorationContentClass",
					GlyphMarginClassName = "decorationGlyphMarginClass"
				}
			}
		};

		decorationIds = await _editor.DeltaDecorations(null, newDecorations);
		// You can now use 'decorationIds' to change or remove the decorations
	}

}

<div class="content px-4">
	<MonacoEditor Id="myMainEditor"
				  @ref="_editor"
				  OnDidInit="EditorOnDidInit"
				  ConstructionOptions="EditorConstructionOptions"
				  OnDidChangeCursorPosition="EditorDidChangeCursorPosition" />
</div>

